org: amaurilima
service: template-sls-login-social

provider:
  name: aws
  runtime: nodejs20.x
  architecture: arm64
  region: sa-east-1
  environment:
    COGNITO_CLIENT_ID:
      Ref: UserPoolClient
    COGNITO_USER_POOL_ID:
      Ref: UserPool
    COGNITO_CLIENT_SECRET: !GetAtt UserPoolClient.ClientSecret
    COGNITO_POOL_DOMAIN: !Join ['', ['https://', !Ref UserPoolDomain, '.auth.${self:provider.region}.amazoncognito.com']]
  httpApi:
    cors:
      allowedOrigins:
        - http://localhost:5173
      allowedHeaders: '*'
      allowedMethods: '*'
    authorizers:
      CognitoAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: !GetAtt UserPool.ProviderURL
        audience:
          - Ref: UserPoolClient
  iam:
    role:
      statements:
        - Effect: Allow
          Action: s3:PutObject
          Resource: arn:aws:s3:::template-middy-sls/*
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:UpdateItem
          Resource:
            - Fn::GetAtt: [Table, Arn]
        - Effect: Allow
          Action:
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminCreateUser
            - cognito-idp:ListUsers
            - cognito-idp:AdminLinkProviderForUser
          Resource: !GetAtt UserPool.Arn

package:
  individually: true

build:
  esbuild:
    bundle: true
    minify: true
    sourcemap: false
    exclude:
      - '@aws-sdk/*'

functions:
  cognito-custom-message:
    handler: src/main/functions/auth/custom-message.handler
    events:
      - cognitoUserPool:
          pool: UserPool
          trigger: CustomMessage
          existing: true
          forceDeploy: true
  exchange-code:
    handler: src/main/functions/auth/exchange-code.handler
    events:
      - httpApi:
          path: /auth/exchange
          method: POST
  pre-sign-up-trigger:
    handler: src/main/functions/auth/pre-sign-up-trigger.handler
    events:
      - cognitoUserPool:
          pool: UserPool
          trigger: PreSignUp
          existing: true
          forceDeploy: true
  sign-up:
    handler: src/main/functions/auth/sign-up.handler
    events:
      - httpApi:
          path: /auth/sign-up
          method: POST
  sign-in:
    handler: src/main/functions/auth/sign-in.handler
    events:
      - httpApi:
          path: /auth/sign-in
          method: POST
  refresh-token:
    handler: src/main/functions/auth/refresh-token.handler
    events:
      - httpApi:
          path: /auth/refresh-token
          method: POST
  account-confirmation:
    handler: src/main/functions/auth/account-confirmation.handler
    events:
      - httpApi:
          path: /auth/account-confirmation
          method: POST
  forgot-password:
    handler: src/main/functions/auth/forgot-password.handler
    events:
      - httpApi:
          path: /auth/forgot-password
          method: POST
  reset-password:
    handler: src/main/functions/auth/reset-password.handler
    events:
      - httpApi:
          path: /auth/reset-password
          method: POST
  profile:
    handler: src/main/functions/auth/profile.handler
    events:
      - httpApi:
          path: /auth/profile
          method: GET
          authorizer: CognitoAuthorizer

resources:
  - ${file(./resources/dynamodb/table.yml)}
  - ${file(./resources/cognito/user-pool.yml)}
  - ${file(./resources/cognito/user-pool-domain.yml)}
  - ${file(./resources/cognito/google-identity-provider.yml)}
  - ${file(./resources/cognito/user-pool-client.yml)}
